import { useEffect, useState } from "react";
import { parseString } from "./reader.ts"
import { parseSave } from "./writer.ts";
import { saveData, item } from "./type.ts";
import Container from 'react-bootstrap/Container';
import Row from 'react-bootstrap/Row';
import Col from 'react-bootstrap/Col';
import Accordion from 'react-bootstrap/Accordion';
import Save from "./components/Save.tsx";
import { Alert, Button } from "react-bootstrap";

function App() {

	const [saveString, setSaveString] = useState("");
	const [save, setSave] = useState<{saveData: saveData, initialSize: number}>();
	const [newSavestring, setNewSaveString] = useState("");
    const [activeItem, setActiveItem] = useState("0");
    const [items, setItems] = useState<Map<string, Array<item>>>(new Map());

    const dataSets = [["melvorDemo", "melvorD"], ["melvorFull", "melvorF"], ["melvorTotH", "melvorToH"], ["melvorExpansion2", "melvorAoD"], ["melvorItA", "melvorItA"]];



    useEffect(() => {
        var tempMap: Map<string, Array<item>> = new Map();
        dataSets.forEach((dataSet) => {
            fetch("/"+dataSet[0]+".json").then((response) => {
                if (response.ok) {
                    response.json().then((value) => {
                        value.data.items.forEach((item: any) => {
                            console.log(item);
                            const newItem = {
                                namespace: dataSet[1] + ":" + item.id,
                                name: item.name,
                                image: item.media
                            }
                            var  tempArray = tempMap.get(item.itemType)
                            if (tempArray == undefined)
                                tempArray = [newItem];
                            else
                                tempArray.push(newItem);
                            console.log(item.itemType);
                            tempMap.set(item.itemType, tempArray);
                        })
                        //const categories = ["ItemID", "EquipmentItemID", "FoodItemID", "BoneItemID", "PotionItemID", "ReadableItemID", "OpenableItemID", "TokenItemID", "CompostItemID", "SoulItemID", "RuneItemID", "FiremakingOilItemID"];
                        //categories.forEach((category) => {
                        //    tempArray = tempArray.concat(value.$defs[category].anyOf[1].enum);
                        //});
                        //setItems(tempArray);
                    })
                }
            })
        })
        
        setItems(tempMap);
        console.log(tempMap);
        
    }, []);

	const generateSave = () => {
	if (save)
        console.log(items);
		setNewSaveString(parseSave(save!.saveData, save!.initialSize));
	}

    const addToSave = (object: any, paths: Array<string>, value: any, dataType: number) => { // array, map, object
        if (paths.length > 1)
            return addToSave(object[paths[0]], paths.slice(1), value, dataType);
        else {
            if (dataType == 0)
                object[paths[0]].push(value);
            else if (dataType == 1)
                object.set(paths[0], value);
        }
    }   

    const deleteFromSave = (object: any, paths: Array<string>, dataType: number) => {
        if (paths.length > 1)
            return deleteFromSave(object[paths[0]], paths.slice(1), dataType);
        else {
            if (dataType == 0)
                object.splice(paths[0], 1);
            else if (dataType == 1)
                object.delete(paths[0]);
        }
    }  

    const updateSave = (object: any, paths: Array<string>, value: any, dataType: number) => {
        if (paths.length > 1)
            return updateSave(object[paths[0]], paths.slice(1), value, dataType);
        else {
            if (dataType == 0 || dataType == 2)
                object[paths[0]] = value;
            else if (dataType == 1)
                object.set(paths[0], value);
        }
    }  

    const addItem = (path: string, item: any, dataType: number) => {
        const splitSave = path.split(".");
        var copySave = {...save}
        console.log(copySave);
        addToSave(copySave.saveData!, splitSave, item, dataType);
        console.log(copySave);
        // @ts-ignore
        setSave(copySave);
    }

    const deleteItem = (path: string, dataType: number) => {
        const splitSave = path.split(".");
        var copySave = {...save}
        console.log(copySave);
        deleteFromSave(copySave.saveData!, splitSave, dataType);
        console.log(copySave);
        // @ts-ignore
        setSave(copySave);
    }

    const updateItem = (path: string, newValue: any, dataType: number) => {
        const splitSave = path.split(".");
        var copySave = {...save}
        console.log(copySave);
        updateSave(copySave.saveData!, splitSave, newValue, dataType);
        console.log(copySave);
        // @ts-ignore
        setSave(copySave);
    }

	return (
	<Container>
		<Row>
            <Col className="p-3">
                <h1>Melvor Idle Parser</h1>
            </Col>
		</Row>
		<Row>
            <Col>
                <Accordion activeKey={activeItem}>
                    <Accordion.Item eventKey="0">
                        <Accordion.Header onClick={() => {setActiveItem("0")}}>Save String</Accordion.Header>
                        <Accordion.Body>
                            <textarea className="form-control" aria-label="With textarea" style={{height: "calc(100vh - 350px)"}} value={saveString} onChange={e => setSaveString(e.target.value)}></textarea>
                            <Button className="mt-3" disabled={saveString == ""} onClick={() => { setActiveItem("1"); setSave(parseString(saveString))}} variant="primary" style={{width: "100%"}}>Load save data</Button>
                        </Accordion.Body>
                    </Accordion.Item>
                    <Accordion.Item eventKey="1">
                        <Accordion.Header onClick={() => setActiveItem("1")}>Parsed Save File</Accordion.Header>
                        <Accordion.Body>
                            { save ? <Save items={items} save={save?.saveData} removeItem={deleteItem} updateItem={updateItem} addItem={addItem}></Save> : <Alert variant="danger">"Invalid save string"</Alert> }
                        </Accordion.Body>
                    </Accordion.Item>
                    <Accordion.Item eventKey="2">
                        <Accordion.Header onClick={() => {generateSave(); setActiveItem("2")}}>New Save String</Accordion.Header>
                        <Accordion.Body>
                            <textarea className="form-control" aria-label="With textarea" style={{height: "calc(100vh - 300px)"}} value={newSavestring} readOnly></textarea>
                        </Accordion.Body>
                    </Accordion.Item>
                </Accordion>
            </Col>
		</Row>
	</Container>
	)
}

export default App
