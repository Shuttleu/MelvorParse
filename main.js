import * as fflate from 'fflate';
class Reader {
    saveString = "";
    parsedString = "";
    dataView = "";
    offset = 10;

    parseString() {
        this.parsedString = fflate.unzlibSync(fflate.strToU8(atob(this.saveString), true)).buffer;
        this.dataView = new DataView(this.parsedString);
    }

    getString() {
        const stringLength = this.getUint32();
        const decoder = new TextDecoder()
        const encodedString = this.parsedString.slice(this.offset, this.offset + stringLength);
        const string = decoder.decode(encodedString);
        this.offset += stringLength;
        return string;
    }

    getInt8() {
        const value = this.dataView.getInt8(this.offset);
        this.offset += Int8Array.BYTES_PER_ELEMENT;
        return value;
    }
    getUint8() {
        const value = this.dataView.getUint8(this.offset);
        this.offset += Uint8Array.BYTES_PER_ELEMENT;
        return value;
    }

    getUint16() {
        const value = this.dataView.getUint16(this.offset);
        this.offset += Uint16Array.BYTES_PER_ELEMENT;
        return value;
    }
    getInt16() {
        const value = this.dataView.getInt16(this.offset);
        this.offset += Int16Array.BYTES_PER_ELEMENT;
        return value;
    }

    getUint32() {
        const value = this.dataView.getUint32(this.offset);
        this.offset += Uint32Array.BYTES_PER_ELEMENT;
        return value;
    }

    getBoolean() {
        return this.getUint8() === 1;
    }

    getFloat64() {
        const value = this.dataView.getFloat64(this.offset);
        this.offset += Float64Array.BYTES_PER_ELEMENT;
        return value;
    }
    getFixedLengthBuffer(length) {
        const buffer = this.parsedString.slice(this.offset, this.offset + length);
        this.offset += length;
        return buffer;
    }

    getArray(value) {
        var result = [];
        const arraySize = this.getUint32();
        for (var i = 0; i < arraySize; i++) {
            result.push(value(this))
        }
        return result;
    }

    getSet(value) {
        var result = new Set();
        const arraySize = this.getUint32();
        for (var i = 0; i < arraySize; i++) {
            result.add(value(this))
        }
        return result;
    }

    getMap(key, value) {
        var result = new Map();
        const arraySize = this.getUint32();
        for (var i = 0; i < arraySize; i++) {
            var setKey = key(this);
            var setValue = value(this);
            result.set(setKey, setValue);
        }
        return result;
    }
}








var reader = new Reader();
reader.saveString = "";

reader.parseString();

const headerNamespaces = reader.getMap(
    (reader) => reader.getString(), 
    (reader) => reader.getMap(
            (reader) => reader.getString(),
            (reader) => reader.getUint16()
        )
);

const headerSaveVersion = reader.getUint32();
if (headerSaveVersion != 130) throw new Error("Unsupported save version: " + headerSaveVersion);
const headerSaveName = reader.getString();
const headerGameMode = reader.getString();
const headerSkillLevel = reader.getUint16();
const headerGp = reader.getFloat64();
const headerActiveTraining = reader.getBoolean();
const headerActiveTrainingName = reader.getString();
const headerTickTime = reader.getFloat64();
const headerSaveTime = reader.getFloat64();
const headerActiveNamespaces = reader.getArray((reader) => reader.getString());

if (reader.getBoolean()) {
    var headerModProfileId = reader.getString();
    var headerModProfileName = reader.getString();
    var headerMods = reader.getArray((reader) => reader.getUint32());
}
const unknown = reader.getUint32(); // Unknown

const tickTime = reader.getFloat64();
const saveTime = reader.getFloat64();
var activeAction = 0;
if (reader.getBoolean()) {
    activeAction = reader.getUint16();
}
var pausedAction = 0;
if (reader.getBoolean()) {
    pausedAction = reader.getUint16();
}
const paused = reader.getBoolean();
const merchantsPermitRead = reader.getBoolean();
const gameMode = reader.getUint16();
const characterName = reader.getString();

// Bank start
var lockedItems = reader.getArray((reader) => reader.getUint16());
var bankTabs = reader.getArray(
    (reader) => reader.getMap(
        (reader) => reader.getUint16(),
        (reader) => reader.getUint32()
    )
);

var defaultItemTabs = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => reader.getUint8()
);
var customSortOrder = reader.getArray((reader) => reader.getUint16());
var glowingItems = reader.getArray((reader) => reader.getUint16());
var tabIcons = reader.getMap(
    (reader) => reader.getUint8(),
    (reader) => reader.getUint16()
);
// Bank Complete

// Character / Combat start
// Character start
const hp = reader.getUint32();
const nextAction = reader.getUint8();
const attackCount = reader.getUint32();
const nextAttack = reader.getUint16();
const isAttacking = reader.getBoolean();
const firstHit = reader.getBoolean();
const actionTicksLeft = reader.getUint32();
const actionMaxTicks = reader.getUint32();
const actionActive = reader.getBoolean();
const regenTicksLeft = reader.getUint32();
const regenMaxTicks = reader.getUint32();
const regenActive = reader.getBoolean();
const turnsTaken = reader.getUint32();
const bufferedRegen = reader.getUint32();
const activeEffects = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var tempArray = [];
        tempArray.push("Player: " + reader.getBoolean());
        tempArray.push("Type: " + reader.getUint8());
        tempArray.push("damageDealt: " + reader.getFloat64());
        tempArray.push("damageTaken: " + reader.getFloat64());
        tempArray.push(reader.getArray((reader) => "parameters: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "statGroups: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => [
            "timers: " + reader.getString(),
            "ticksLeft: " + reader.getUint32(),
            "maxTicks: " + reader.getUint32(),
            "active: " + reader.getBoolean()
        ]))
        return 
    }
);
const firstMiss = reader.getBoolean();
const barrier = reader.getUint32();
if (reader.getBoolean()) {
    var melee = reader.getUint16();
}
if (reader.getBoolean()) {
    var ranged = reader.getUint16();
}
if (reader.getBoolean()) {
    var magic = reader.getUint16();
}
const prayerPoints = reader.getUint32();
const selectedEquipmentSet = reader.getUint16();
var equipmentSets = reader.getArray((reader) => {
    var equipment = reader.getArray((reader) => {
        var id = reader.getUint16();
        if (reader.getBoolean()) {
            var stackable = reader.getUint16();
            var qty = reader.getUint32();
        }
        var quickEquip = reader.getArray((reader) => reader.getUint16());
        return ["item: " + id, "stackable: " + stackable, "qty: " + qty, "quickEquip: " + quickEquip];
    });
    if (reader.getBoolean()) {
        var spell = reader.getUint16();
    }
    if (reader.getBoolean()) {
        var aura = reader.getUint16();
    }
    if (reader.getBoolean()) {
        var curse = reader.getUint16();
    }
    var spells = [spell, aura, curse]
    var prayers = reader.getArray((reader) => reader.getUint16());
    return [equipment, spells, prayers]
});
const selectedFoodSlot = reader.getUint32();
const maxFoodSlot = reader.getUint32();
const foodSlots = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
const summonTicksLeft = reader.getUint32();
const summonMaxTicks = reader.getUint32();
const summonActive = reader.getBoolean();
const soulPoints = reader.getUint32();
const unholyPrayerMultiplier = reader.getUint8();
// Character Complete

// Enemy start
const enemyHitpoints = reader.getUint32();
const enemyAction = reader.getUint8();
const enemyAttackCount = reader.getUint32();
const enemyNextAttack = reader.getUint16();
const enemyAttacking = reader.getBoolean();
const enemyFirstHit = reader.getBoolean();

const enemyActionTicksLeft = reader.getUint32();
const enemyActionMaxTicks = reader.getUint32();
const enemyActionActive = reader.getBoolean();
const enemyRegenTicksLeft = reader.getUint32();
const enemyRegenMaxTicks = reader.getUint32();
const enemyRegenActive = reader.getBoolean();

const enemyTurnsTaken = reader.getUint32();
const enemyBufferedRegen = reader.getUint32();
const enemyActiveEffects = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var tempArray = [];
        tempArray.push("Player: " + reader.getBoolean());
        tempArray.push("Type: " + reader.getUint8());
        tempArray.push("damageDealt: " + reader.getFloat64());
        tempArray.push("damageTaken: " + reader.getFloat64());
        tempArray.push(reader.getArray((reader) => "parameters: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "statGroups: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => [
            "timers: " + reader.getString(),
            "ticksLeft: " + reader.getUint32(),
            "maxTicks: " + reader.getUint32(),
            "active: " + reader.getBoolean()
        ]))
        return 
    }
);
const enemyFirstMiss = reader.getBoolean();
const enemyBarrier = reader.getUint32();

const enemyState = reader.getUint8();
const enemyAttackType = reader.getUint8();
var enemy = 0;
if (reader.getBoolean()) {
    enemy = reader.getUint16();
}
var damageType = 0;
if (reader.getBoolean()) {
    damageType = reader.getUint16();
}
// Enemy Complete


// Fight Start
const fightInProgess = reader.getBoolean();
const fightSpawnTicksLeft = reader.getUint32();
const fightSpawnMaxTicks = reader.getUint32();
const fightSpawnActive = reader.getBoolean();
const combatActive = reader.getBoolean();
var combatPassives = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getBoolean());
var combatArea = 0;
var combatSubArea = 0;
if (reader.getBoolean()) {
    combatArea = reader.getUint8();
    combatSubArea = reader.getUint16();
}

const combatAreaProgress = reader.getUint32();
var monster = 0;
if (reader.getBoolean()) {
    monster = reader.getUint16();
}
const combatPaused = reader.getBoolean();
var loot = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());


// Slayer start
const slayerActive = reader.getBoolean();
if (reader.getBoolean()) {
    var slayerTask = reader.getUint16();
}   
const slayerLeft = reader.getUint32();
const slayerExtended = reader.getBoolean();
if (reader.getBoolean()) {
    var slayerCategory = reader.getUint16();
}
var slayerCategories = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());

const slayerTaskTicksLeft = reader.getUint32();
const slayerTaskMaxTicks = reader.getUint32();
const slayerTaskActive = reader.getBoolean();
const slayerRealm = reader.getUint16();
// Slayer Complete

if (reader.getBoolean()) {
    var activeEvent = reader.getUint16();
}
var eventPassives = reader.getArray((reader) => reader.getUint16());
const eventPassivesSelected = reader.getArray((reader) => reader.getUint16());
const eventDungeonLength = reader.getUint32();
var activeEventAreas = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
const eventProgress = reader.getUint32();
var eventDungeonCompletions = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
const eventStrongholdTier = reader.getUint8();
// Combat Complete

// Goblin start

const raidhp = reader.getUint32();
const raidnextAction = reader.getUint8();
const raidattackCount = reader.getUint32();
const raidnextAttack = reader.getUint16();
const raidisAttacking = reader.getBoolean();
const raidfirstHit = reader.getBoolean();
const raidactionTicksLeft = reader.getUint32();
const raidactionMaxTicks = reader.getUint32();
const raidactionActive = reader.getBoolean();
const raidregenTicksLeft = reader.getUint32();
const raidregenMaxTicks = reader.getUint32();
const raidregenActive = reader.getBoolean();
const raidturnsTaken = reader.getUint32();
const raidbufferedRegen = reader.getUint32();
const raidactiveEffects = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var tempArray = [];
        tempArray.push("Player: " + reader.getBoolean());
        tempArray.push("Type: " + reader.getUint8());
        tempArray.push("damageDealt: " + reader.getFloat64());
        tempArray.push("damageTaken: " + reader.getFloat64());
        tempArray.push(reader.getArray((reader) => "parameters: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "statGroups: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "timers: " + reader.getString() + "ticksLeft: " + reader.getUint32() + " maxTicks: " + reader.getUint32() + " active: " + reader.getBoolean()))
        return 
    }
);

const raidfirstMiss = reader.getBoolean();
const raidbarrier = reader.getUint32();
if (reader.getBoolean()) {
    var raidMeleeStyle = reader.getUint16();
}
if (reader.getBoolean()) {
    var raidRangedStyle = reader.getUint16();
}
if (reader.getBoolean()) {
    var raidMagicStyle = reader.getUint16();
}
const raidprayerPoints = reader.getUint32();
const raidselectedEquipmentSet = reader.getUint16();
var raidequipmentSets = reader.getArray((reader) => {
    var equipment = reader.getArray((reader) => {
        var id = reader.getUint16();
        if (reader.getBoolean()) {
            var stackable = reader.getUint16();
            var qty = reader.getUint32();
        }
        var quickEquip = reader.getArray((reader) => reader.getUint16());
        return ["item: " + id, "stackable: " + stackable, "qty: " + qty, "quickEquip: " + quickEquip];
    });
    if (reader.getBoolean()) {
        var spell = reader.getUint16();
    }
    if (reader.getBoolean()) {
        var aura = reader.getUint16();
    }
    if (reader.getBoolean()) {
        var curse = reader.getUint16();
    }
    var spells = [spell, aura, curse]
    var prayers = reader.getArray((reader) => reader.getUint16());
    return [equipment, spells, prayers]
});
const raidselectedFoodSlot = reader.getUint32();
const raidmaxFoodSlot = reader.getUint32();
const raidfoodSlots = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());

const raidsummonTicksLeft = reader.getUint32();
const raidsummonMaxTicks = reader.getUint32();
const raidsummonActive = reader.getBoolean();
const raidsoulPoints = reader.getUint32();
const raidunholyPrayerMultiplier = reader.getUint8();
const raidAltAttacks = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => reader.getArray((reader) => reader.getUint16())
);

// Character Complete

// Enemy start
const raidenemyHitpoints = reader.getUint32();
const raidenemyAction = reader.getUint8();
const raidenemyAttackCount = reader.getUint32();
const raidenemyNextAttack = reader.getUint16();
const raidenemyAttacking = reader.getBoolean();
const raidenemyFirstHit = reader.getBoolean();

const raidenemyActionTicksLeft = reader.getUint32();
const raidenemyActionMaxTicks = reader.getUint32();
const raidenemyActionActive = reader.getBoolean();
const raidenemyRegenTicksLeft = reader.getUint32();
const raidenemyRegenMaxTicks = reader.getUint32();
const raidenemyRegenActive = reader.getBoolean();

const raidenemyTurnsTaken = reader.getUint32();
const raidenemyBufferedRegen = reader.getUint32();
const raidenemyactiveEffects = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var tempArray = [];
        tempArray.push("Player: " + reader.getBoolean());
        tempArray.push("Type: " + reader.getUint8());
        tempArray.push("damageDealt: " + reader.getFloat64());
        tempArray.push("damageTaken: " + reader.getFloat64());
        tempArray.push(reader.getArray((reader) => "parameters: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "statGroups: " + reader.getString() + ": " + reader.getUint32()))
        tempArray.push(reader.getArray((reader) => "timers: " + reader.getString() + "ticksLeft: " + reader.getUint32() + " maxTicks: " + reader.getUint32() + " active: " + reader.getBoolean()))
        return 
    }
);
const raidenemyFirstMiss = reader.getBoolean();
const raidenemyBarrier = reader.getUint32();

const raidenemyState = reader.getUint8();
const raidenemyAttackType = reader.getUint8();
var raidenemy = 0;
if (reader.getBoolean()) {
    raidenemy = reader.getUint16();
}
var raiddamageType = 0;
//var bool = reader.getBoolean();
//if (bool) {
//    raiddamageType = reader.getUint16();
//}

if (reader.getBoolean()) {
    var goblinName = reader.getString();
    var goblinHitpoints = reader.getUint32();
    var goblinAttack = reader.getUint32();
    var goblinStrength = reader.getUint32();
    var goblinDefence = reader.getUint32();
    var goblinRanged = reader.getUint32();
    var goblinMagic = reader.getUint32();
    var goblinAttackType = reader.getUint8();
    var goblinImage = reader.getInt8();
    var goblinPassives = reader.getArray((reader) => reader.getUint16());
    var goblinCorruption = reader.getUint32();
}
// Enemy Complete


// Fight Start
const raidfightInProgess = reader.getBoolean();
const raidfightSpawnTicksLeft = reader.getUint32();
const raidfightSpawnMaxTicks = reader.getUint32();
const raidfightSpawnActive = reader.getBoolean();
const raidcombatActive = reader.getBoolean();
var raidcombatPassives = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getBoolean());
var raidPlayerModifiers = reader.getMap((reader) => reader.getUint16(), (reader) => {
    var modifiers = ["value: " + reader.getFloat64(), "modifierKey: " + reader.getUint32()];
    for (var i = 1; i <= 256; i *= 2)
        if (modifiers[1] & i) {
            modifiers.push("skill: "+getUint16());
        }
    return modifiers;
});

var raidEnemyModifiers = reader.getMap((reader) => reader.getUint16(), (reader) => {
    var modifiers = ["value: " + reader.getFloat64(), "modifierKey: " + reader.getUint32()];
    for (var i = 1; i <= 256; i *= 2)
        if (modifiers[1] & i) {
            modifiers.push("skill: "+getUint16());
        }
    return modifiers;
});

const raidState = reader.getUint8();
const raidDifficulty = reader.getUint8();

var raidlockedItems = reader.getArray((reader) => reader.getUint16());

var raidbankTabs = reader.getArray(
    (reader) => reader.getMap(
        (reader) => reader.getUint16(),
        (reader) => reader.getUint32()
    )
);
var raiddefaultItemTabs = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint8())
var raidcustomSortOrder = reader.getArray((reader) => reader.getUint16());
var raidglowingItems = reader.getArray((reader) => reader.getUint16());
var raidtabIcons = reader.getMap((reader) => reader.getUint8(), (reader) => reader.getUint16());

const raidWave = reader.getUint32();
const raidWaveProgress = reader.getUint32();
const raidKillCount = reader.getUint32();
const raidStart = reader.getFloat64();
const raidOwnedCrateItems = reader.getArray((reader) => reader.getUint16());

var raidRandomModifiers = reader.getMap((reader) => reader.getUint16(), (reader) => {
    var modifiers = ["value: " + reader.getFloat64(), "modifierKey: " + reader.getUint32()];
    for (var i = 1; i <= 256; i *= 2)
        if (modifiers[1] & i) {
            modifiers.push("skill: "+getUint16());
        }
    return modifiers;
});
const raidSelectedPositiveModifier = reader.getBoolean();
var raidItemWeapons = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemArmour = reader.getMap(
    (reader) => reader.getUint16(), 
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemAmmo = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemRunes = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemFoods = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemPassives = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => ["qty: " + reader.getUint32(), "alt: " + reader.getBoolean()]
);
const raidItemCategory = reader.getUint8();
const raidPosMods = reader.getUint8();
const raidNegMods = reader.getUint8();
const raidPaused = reader.getBoolean();
var raidHistories = reader.getArray((reader) => {
    var raidSkills = reader.getArray((reader) => reader.getUint32());
    var raidEquipments = reader.getArray((reader) => reader.getUint16());
    var ammo = reader.getUint32();
    var inventories = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32())
    var food = reader.getUint16();
    var foodQty = reader.getUint32();
    var wave = reader.getUint32();
    var kills = reader.getUint32();
    var time = reader.getFloat64();
    var coins = reader.getUint32();
    var difficuilty = reader.getUint8();
    var raidHistory = {
        skills: raidSkills,
        equipment: raidEquipments,
        ammo: ammo,
        inventories: inventories,
        history: raidHistory,
        food: food,
        foodQty: foodQty,
        wave: wave,
        kills: kills,
        time: time,
        coins: coins,
        difficulty: difficuilty
    };
    return raidHistory;
})

// Goblin Complete

// Minibar Start
var MinibarItems = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getArray((reader) => reader.getUint16()));
// Minibar Complete

// Pets Start
var petList = reader.getArray((reader) => reader.getUint16());
// Pets Complete

// Shop Start
var shopItems = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
const purchaseQty = reader.getFloat64();
// Shop Complete

// Item Charges Start
var itemCharges = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
// Item Charges Complete

const tutorialComplete = reader.getBoolean();
if (!tutorialComplete){
    throw new Error("Tutorial not complete");
}

// Start Potions
var potionList = reader.getMap((reader) => reader.getUint16(), (reader) => [reader.getUint16(), reader.getUint32()]);
var potionReuse = reader.getArray((reader) => reader.getUint16());
// End Potions

// Start Stats
var woodcuttingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var fishingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var firemakingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var cookingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var miningStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var smithingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var attackStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var strengthStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var defenceStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var hitpointsStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var theivingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var farmingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var rangedStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var fletchingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var craftingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var runecraftingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var magicStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var prayerStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var slayerStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var herbloreStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var agilityStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var summoningStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());






var itemsStats = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => reader.getMap(
        (reader) => reader.getUint32(),
        (reader) => reader.getFloat64()
    )
);

var monstersStats = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => reader.getMap(
        (reader) => reader.getUint32(),
        (reader) => reader.getFloat64()
    )
);





var generalStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var combatStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var goblinStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var astrologyStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var shopStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var townshipStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var cartographyStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var archaeologyStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var corruptionStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
var harvestingStats = reader.getMap((reader) => reader.getUint32(), (reader) => reader.getFloat64());
// End Stats

// Start Settings
const settingcontinueIfBankFull = reader.getBoolean();
const settingcontinueThievingOnStun = reader.getBoolean();
const settingautoRestartDungeon = reader.getBoolean();
const settingautoCloudSave = reader.getBoolean();
const settingdarkMode = reader.getBoolean();
const settingshowGPNotifications = reader.getBoolean();
const settingenableAccessibility = reader.getBoolean();
const settingshowEnemySkillLevels = reader.getBoolean();
const settingshowCloseConfirmations = reader.getBoolean();
const settinghideThousandsSeperator = reader.getBoolean();
const settingshowVirtualLevels = reader.getBoolean();
const settingshowSaleConfirmations = reader.getBoolean();
const settingshowShopConfirmations = reader.getBoolean();
const settingpauseOnUnfocus = reader.getBoolean();
const settingshowCombatMinibar = reader.getBoolean();
const settingshowCombatMinibarCombat = reader.getBoolean();
const settingshowSkillingMinibar = reader.getBoolean();
const settinguseCombinationRunes = reader.getBoolean();
const settingenableAutoSlayer = reader.getBoolean();
const settingshowItemNotifications = reader.getBoolean();
const settinguseSmallLevelUpNotifications = reader.getBoolean();
const settinguseDefaultBankBorders = reader.getBoolean();
const settingdefaultToCurrentEquipSet = reader.getBoolean();
const settinghideMaxLevelMasteries = reader.getBoolean();
const settingshowMasteryCheckpointconfirmations = reader.getBoolean();
const settingenableOfflinePushNotifications = reader.getBoolean();
const settingenableFarmingPushNotifications = reader.getBoolean();
const settingenableOfflineCombat = reader.getBoolean();
const settingenableMiniSidebar = reader.getBoolean();
const settingenableAutoEquipFood = reader.getBoolean();
const settingenableAutoSwapFood = reader.getBoolean();
const settingenablePerfectCooking = reader.getBoolean();
const settingshowCropDestructionConfirmations = reader.getBoolean();
const settingshowAstrologyMaxRollConfirmations = reader.getBoolean();
const settingshowQuantityInItemNotifications = reader.getBoolean();
const settingshowItemPreservationNotifications = reader.getBoolean();
const settingshowSlayerCoinNotifications = reader.getBoolean();
const settingshowEquipmentSetsInCombatMinibar = reader.getBoolean();
const settingshowBarsInCombatMinibar = reader.getBoolean();
const settingshowCombatStunNotifications = reader.getBoolean();
const settingshowCombatSleepNotifications = reader.getBoolean();
const settingshowSummoningMarkDiscoveryModals = reader.getBoolean();
const settingenableCombatDamageSplashes = reader.getBoolean();
const settingenableProgressBars = reader.getBoolean();
const settingshowTierIPotions = reader.getBoolean();
const settingshowTierIIPotions = reader.getBoolean();
const settingshowTierIIIPotions = reader.getBoolean();
const settingshowTierIVPotions = reader.getBoolean();
const settingshowNeutralAttackModifiers = reader.getBoolean();
const settingdefaultPageOnLoad = reader.getUint16();
const settingformatNumberSetting = reader.getUint8();
const settingbankSortOrder = reader.getUint8();
const settingcolourBlindMode = reader.getUint8();
const settingenableEyebleachMode = reader.getBoolean();
const settingenableQuickConvert = reader.getBoolean();
const settingshowLockedTownshipBuildings = reader.getBoolean();
const settinguseNewNotifications = reader.getBoolean();
const settingnotificationHorizontalPosition = reader.getUint8();
const settingnotificationDisappearDelay = reader.getUint8();
const settingshowItemNamesInNotifications = reader.getBoolean();
const settingimportanceSummoningMarkFound = reader.getBoolean();
const settingimportanceErrorMessages = reader.getBoolean();
const settingenableScrollableBankTabs = reader.getBoolean();
const settingshowWikiLinks = reader.getBoolean();
const settingdisableHexGridOutsideSight = reader.getBoolean();
const settingmapTextureQuality = reader.getUint8();
const settingenableMapAntialiasing = reader.getBoolean();
const settingshowSkillXPNotifications = reader.getBoolean();
const settingbackgroundImage = reader.getInt8();
const settingsuperDarkMode = reader.getBoolean();
const settingshowExpansionBackgroundColours = reader.getBoolean();
const settingshowCombatAreaWarnings = reader.getBoolean();
const settinguseCompactNotifications = reader.getBoolean();
const settinguseLegacyNotifications = reader.getBoolean();
const settinguseCat = reader.getBoolean();
const settingthrottleFrameRateOnInactivity = reader.getBoolean();
const settingcartographyFrameRateCap = reader.getUint16();
const settingtoggleBirthdayEvent = reader.getBoolean();
const settingtoggleDiscordRPC = reader.getBoolean();
const settinggenericArtefactAllButOne = reader.getBoolean();

const settinghiddenMasteryNamespaces = reader.getArray((reader) => reader.getString());
const settingenableDoubleClickEquip = reader.getBoolean();
const settingenableDoubleClickOpen = reader.getBoolean();
const settingenableDoubleClickBury = reader.getBoolean();
const settingshowAbyssalPiecesNotifications = reader.getBoolean();
const settingshowAbyssalSlayerCoinNotifications = reader.getBoolean();
const settingenablePermaCorruption = reader.getBoolean();
const settingshowAPNextToShopSidebar = reader.getBoolean();
const settingshowASCNextToSlayerSidebar = reader.getBoolean();
const settingsidebarLevels = reader.getUint8();
const settingshowAbyssalXPNotifications = reader.getBoolean();
const settingshowSPNextToPrayerSidebar = reader.getBoolean();
const settingenableStickyBankTabs = reader.getBoolean();
const settinguseLegacyRealmSelection = reader.getBoolean();
const settingshowOpacityForSkillNavs = reader.getBoolean();
const settingbankFilterShowAll = reader.getBoolean();
const settingbankFilterShowDemo = reader.getBoolean();
const settingbankFilterShowFull = reader.getBoolean();
const settingbankFilterShowTotH = reader.getBoolean();
const settingbankFilterShowAoD = reader.getBoolean();
const settingbankFilterShowItA = reader.getBoolean();
const settingbankFilterShowDamageReduction = reader.getBoolean();
const settingbankFilterShowAbyssalResistance = reader.getBoolean();
const settingbankFilterShowNormalDamage = reader.getBoolean();
const settingbankFilterShowAbyssalDamage = reader.getBoolean();
const settingbankFilterShowSkillXP = reader.getBoolean();
const settingbankFilterShowAbyssalXP = reader.getBoolean();
const settingalwaysShowRealmSelectAgility = reader.getBoolean();
const settingenableSwipeSidebar = reader.getBoolean();

// Settings Complete

var news = reader.getArray((reader) => reader.getString());

const lastLoadedGameVersion = reader.getString();

var scheduledPushNotifications = reader.getArray((reader) => {
    return {
        id: reader.getString(),
        startDate: reader.getFloat64(),
        endDate: reader.getFloat64(),
        notificationType: reader.getUint8(),
        platform: reader.getString(),
    }
});

// Start Skills
var skills = reader.getMap((reader) => reader.getUint16(), (reader) => {
    var skillMap = new Map();
    var skillSize = reader.getUint32();
    const startOffset = reader.offset;
    skillMap.set("dataSize", skillSize);
    skillMap.set("xp", reader.getFloat64());
    skillMap.set("skillUnlocked", reader.getBoolean());
    skillMap.set("relics", reader.getMap(
        (reader) => reader.getUint16(),
        (reader) => reader.getMap(
            (reader) => reader.getUint16(),
            (reader) => reader.getUint8()
        )
    ));
    skillMap.set("levelCap", reader.getInt16());
    skillMap.set("abyssalLevelCap", reader.getInt16());
    skillMap.set("skillTrees", reader.getMap(
        (reader) => reader.getUint16(),
        (reader) => [reader.getMap((reader) => reader.getUint16(), (reader) => reader.getBoolean()), reader.getUint8()]
    ));
    skillMap.set("abyssalXP", reader.getFloat64());
    skillMap.set("realm", reader.getUint16());
    var remaining = skillSize + startOffset - reader.offset;
    if (remaining > 0) {
        skillMap.set("excessData", reader.getFixedLengthBuffer(remaining));
    }
    return skillMap;
    
})
// Skills Complete

// Mods Start

var mods = reader.getMap(
    (reader) => reader.getUint32(),
    (reader) => [reader.getString(), reader.getString()]
);

// Mods Complete

const completion = reader.getString();

var keyBindings = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => reader.getArray(
        (reader) => {
            if (reader.getBoolean()) {
                return [reader.getString(), reader.getBoolean(), reader.getBoolean(), reader.getBoolean(), reader.getBoolean()]
        }}
    )
);

var birthdayCompletions = reader.getArray((reader) => reader.getBoolean());
const clueHuntStep = reader.getInt8();

var currencies = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var currency = new Map();
        currency.set("qty", reader.getFloat64());
        currency.set("stats", reader.getMap(
            (reader) => reader.getUint32(),
            (reader) => reader.getFloat64()
        ))
        currency.set("currencySkills", reader.getMap(
            (reader) => reader.getUint16(),
            (reader) => reader.getMap(
                (reader) => reader.getUint32(),
                (reader) => reader.getFloat64()
            )
        ))
        return currency;
    }
)

var areaCompletions = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());
var strongholdCompletions = reader.getMap((reader) => reader.getUint16(), (reader) => reader.getUint32());

var randomIncreases = reader.getMap(
    (reader) => reader.getUint16(),
    (reader) => {
        var increases = new Map();
        increases.set("given", reader.getArray((reader) => reader.getUint16()))
        increases.set("increases", reader.getArray((reader) => reader.getUint16()))
        return increases;
    }
);
console.log(randomIncreases);

var capIncreases = reader.getArray((reader) => reader.getUint16());

const levelCapIncreasesBought = reader.getUint16();
const abyssalLevelCapIncreasesBought = reader.getUint16();
const newRealm = reader.getUint16();